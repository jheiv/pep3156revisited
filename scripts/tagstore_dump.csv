# Generated: Fri May  1 19:47:42 2015
'CLAIM',11500,11567,''
'CLAIM',11819,11899,''
'CLAIM',12004,12123,''
'CLAIM',12916,13034,''
'CLAIM',13124,13318,''
'CLAIM',13320,13453,''
'CLAIM',13455,13540,''
'CLAIM',13541,13683,'Are these *all* the methods?'
'CLAIM',13685,13758,''
'CLAIM',13829,13914,''
'CLAIM',13916,14009,''
'CLAIM',24484,24541,'Is this still the case, 5 threads?'
'CLAIM',31342,31372,'Do you really have to pass an empty string option here?  Or is specifying a SSLContext with .verify_mode=ssl.CERT_NONE sufficient?'
'CLAIM',32921,32983,'Is this still the default?'
'CLAIM',33072,33130,'Is this still the default?'
'CLAIM',33233,33311,'Is this still the default?'
'EDIT',5,9,'Doc checkpoint: line 745'
'EDIT',972,982,'Add anchor link to References section'
'EDIT',2555,2557,'make italics'
'EDIT',3666,3671,'=> case,'
'EDIT',4660,4707,'=> denoted as non-standard in the documentation'
'EDIT',5092,5125,'Add anchor link'
'EDIT',6414,6422,'=> In fact,'
'EDIT',10419,10526,'Add anchor link (if reasonable)'
'EDIT',11469,11489,'Add anchor link'
'EDIT',11660,11669,'What kind?  Is this specified?'
'EDIT',12127,12136,'What kind?  Is this specified?'
'EDIT',12860,12909,'=> By the default policy, event loop creation is lazy;...'
'EDIT',13586,13606,'=> set_event_loop(event_loop)  # Make consistent with previous paragraph and disambiguate from loop parameter below.'
'EDIT',13759,13770,'=>(thus overriding'
'EDIT',14298,14300,'=> of'
'EDIT',14465,14472,"current context's"
'EDIT',14759,14767,'=> current event loop is'
'EDIT',15474,15489,'Add href'
'EDIT',15776,15788,'=> stopping, and (Oxford comma nerd :-)'
'EDIT',16144,16151,'=> defined in the module'
'EDIT',16238,16258,'Add href'
'EDIT',17272,17284,'=> stopping, and'
'EDIT',17386,17398,'=> stopping, and'
'EDIT',18723,18735,'=> Stopping, and'
'EDIT',18985,19045,'What happens if it is?  An exception?'
'EDIT',19510,19573,'What happens if it is?  An exception?'
'EDIT',19654,19664,'=> to subsequently  restart'
'EDIT',19727,19739,'rem'
'EDIT',20514,20574,'What happens if it is?  An exception?'
'EDIT',20991,21001,'=> that, while'
'EDIT',21189,21200,'Add anchor'
'EDIT',22062,22063,'May be worth noting the same warning that ~"Callbacks scheduled at exactly the same time will be called in an undefined order." -- if this is actually the case with call_at().'
'EDIT',22370,22377,'Add href'
'EDIT',22746,22761,'=> write a coroutine'
'EDIT',22803,22805,'=> (``coroutine`` is a'
'EDIT',22839,22848,'Add anchor'
'EDIT',23918,23935,'Add anchor link'
'EDIT',24047,24055,'add href'
'EDIT',24811,24832,'Add anchor link'
'EDIT',25354,25378,'Add href'
'EDIT',26872,26896,'Add href'
'EDIT',26988,26992,'=> The same'
'EDIT',27042,27043,'=> apply.'
'EDIT',28008,28017,'Add anchor link'
'EDIT',28022,28030,'Add anchor link'
'EDIT',28841,28858,'Are these keyword-only arguments?'
'EDIT',31799,31808,'Add anchor link (to where though?)'
'EDIT',34103,34112,'If the exception types are implementation-defined, it might make sense to put a footnote at the bottom of the PEP that documents what exceptions the reference implementation raises.'
'EDIT',34294,34336,'This makes sense, but maybe "protocol to call methods on the protocol (itself)" is more clear.  That is, unless the protocol should call methods on the transport (which also makes some sense, depending on the abstraction).'
'EDIT',34387,34408,'Add anchor link'
'EDIT',34440,34460,'Add anchor link'
'EDIT',34463,34489,'If anchor links are used, this sentence can go.'
'EDIT',35225,35229,'=> the order in which they are returned.'
'EDIT',35822,35826,'=> the order in which they are returned.'
'EDIT',35927,35953,'Are these keyword-only?'
'EDIT',36302,36462,"This isn't clear, because it seems to conflict with the previous statements bind() and sock_connect() operate on the first successful result -- but I'll have to play around with this."
